What does a successful cut even look like?

Well, you can choose a certain subset of the things
in the cut, and it would equal 1/2

So what does an unsuccessful cut look like?

Is there a way to cut everything into pieces that
are smaller than one half of the whole thing but still
not get a 
yes it is

XXX XXX XXXX
The above is 10

What if we think about this in reverse order?


1, 8, 12, 6, 2
X, 1, X, 8, X, 12, X, 6, X, 2, X

Now the problem reduces to gluing the
pieces above such that no piece exceeds half
the size

In other words, you cannot pick a
subarray whose length is greater than ((N - 1) >> 1)
In terms of the length of t, no longer than |t| >> 1

1, 8, 12, 6, 2
Pick subarrays at most length 5 / 2 = 2, maximize sum

dp state?

If you don't take a certain item, then you should take
the previous one, right?

Well, I'm going to get 80 points for this O(N^2) solution, might as Well

dp[pref][lasttaken]?

dp(pref, lasttaken = 0) = min(
    dp(pref - 1, lasttaken = |t| / 2),
    dp(pref - 1, lasttaken = 1),
    dp(pref - 1, lasttaken = 0),
) + t[pref]

dp(pref, lasttaken) = dp(pref - lasttaken, lasttaken = 0)
if(pref < lasttaken) dp(pref, lasttaken) = 0;

dp[pref][taken = 1] = min(
    dp(pref - 1, taken = 1),
    dp(pref - 1, taken = 0),
) + t[pref]

dp[pref][taken = 0] = min(
    dp()
)

This is wrong, very wrong

Subtask 1
If you make two cuts, you have to ensure that
your cut produces a piece that is exactly N/2 large

Subtask 2
If the optimal is three cuts, none of your cuts should be
N/2 away from each other

1 cut: L|R
2 cuts: X|XXXXX|XXXX
3 cuts: XX|XXXX|XXX|X
a, b, c, d
a + c = b + d = N / 2

4 cuts: a|b|c|d|e

---
Okay, brute force N <= 20, how would that work?

We have to efficiently check if the cut works

1 + 1 + 1 = 3
1 + 2
2 + 1
3

2^(n / 2 - 1)


X X X X X X

a + b + c + d + e = N

XX|XX|XX

